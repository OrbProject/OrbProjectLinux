name: Release Linux Installers

on:
  release:
    types: [published]

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    env:
      # Tag name of the GitHub release (ex: "v1.2.0")
      VERSION: ${{ github.event.release.tag_name }}

    steps:
      # ----------------------------------------------------
      # 0. Checkout (utile pour le manifeste Flatpak, etc.)
      # ----------------------------------------------------
      - uses: actions/checkout@v4

      # ----------------------------------------------------
      # 1. Outils nécessaires au packaging
      # ----------------------------------------------------
      - name: Install packaging dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential unzip imagemagick libfuse2 \
              flatpak flatpak-builder \
              ruby-dev zlib1g-dev libffi-dev
          sudo gem install --no-document fpm

      # ----------------------------------------------------
      # 2. Récupération du build Unity (archive .zip)
      # ----------------------------------------------------
      - name: Download Unity Linux build
        env:
          BUILD_URL: ${{ secrets.BUILD_URL }}   # Doit pointer vers le FICHIER .zip, pas juste un répertoire
          ZIP_FILE: Build_Linux.zip
        run: |
          echo "Fetching $ZIP_FILE from $BUILD_URL"
          curl -fL "$BUILD_URL" -o "$ZIP_FILE"
          # Vérifie que la taille est > 1 Mo (évite les HTML d'index mal téléchargés)
          if [ $(stat --printf="%s" "$ZIP_FILE") -lt 1048576 ]; then
            echo "::error::Downloaded ZIP is smaller than 1 MB – BUILD_URL is probably not the direct file URL." >&2
            exit 1
          fi
          unzip -q "$ZIP_FILE"

      # ----------------------------------------------------
      # 3. Récupération / conversion de l'icône
      # ----------------------------------------------------
      - name: Download & convert icon to PNG
        env:
          ICON_URL: ${{ secrets.ICON_URL }}
        run: |
          curl -fL "$ICON_URL" -o icon_source
          convert icon_source -resize 512x512\> icon.png

      # ----------------------------------------------------
      # 4. Préparation de l'AppDir (base commune)
      # ----------------------------------------------------
      - name: Prepare AppDir structure
        run: |
          mkdir -p AppDir/usr/share/OrbProject
          cp -r Build_Linux/* AppDir/usr/share/OrbProject/

          mkdir -p AppDir/usr/bin
          cat > AppDir/usr/bin/OrbProject <<'EOF'
          #!/bin/sh
          HERE="$(dirname \"$(readlink -f \"$0\")")"
          exec "$HERE/../share/OrbProject/OrbProject.x86_64" "$@"
          EOF
          chmod +x AppDir/usr/bin/OrbProject

          cp icon.png AppDir/OrbProject.png
          cat > AppDir/OrbProject.desktop <<'EOF'
          [Desktop Entry]
          Name=OrbProject
          Exec=OrbProject
          Icon=OrbProject
          Type=Application
          Categories=Game;
          EOF

      # ----------------------------------------------------
      # 5. AppImage
      # ----------------------------------------------------
      - name: Build AppImage
        uses: appimagecrafters/build-appimage@v1
        with:
          appdir: AppDir
          output: OrbProject-${{ env.VERSION }}.AppImage

      # ----------------------------------------------------
      # 6. Paquet .deb
      # ----------------------------------------------------
      - name: Build .deb package
        run: |
          fpm -s dir -t deb -n OrbProject -v ${VERSION#v} \
              --architecture amd64 \
              --maintainer "Ton Nom <email@example.com>" \
              --license MIT \
              --description "Mon jeu Unity pour Linux" \
              --url "https://github.com/${{ github.repository }}" \
              --depends "libgtk-3-0" --depends "libnss3" \
              -C AppDir usr

      # ----------------------------------------------------
      # 7. Paquet .rpm
      # ----------------------------------------------------
      - name: Build .rpm package
        run: |
          fpm -s dir -t rpm -n OrbProject -v ${VERSION#v} \
              --architecture x86_64 \
              --license MIT \
              --url "https://github.com/${{ github.repository }}" \
              --depends "gtk3" \
              -C AppDir usr

      # ----------------------------------------------------
      # 8. Flatpak
      # ----------------------------------------------------
      - name: Build Flatpak bundle
        uses: flatpak/flatpak-github-actions/flatpak-builder@v6
        with:
          manifest-path: packaging/${{ secrets.APP_ID }}.yml
          repo-name: repo
          bundle: OrbProject-${{ env.VERSION }}.flatpak
          cache: true
          archs: x86_64

      # ----------------------------------------------------
      # 9. Publication des artefacts dans la release
      # ----------------------------------------------------
      - name: Upload installers to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *.AppImage
            *.deb
            *.rpm
            *.flatpak
